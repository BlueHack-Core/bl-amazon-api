# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.browse_node import BrowseNode  # noqa: F401,E501
from swagger_server import util


class GetAdvertisingBrowseNodesResponseData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, node_id: str=None, name: str=None, children: List[BrowseNode]=None, ancestors: List[BrowseNode]=None):  # noqa: E501
        """GetAdvertisingBrowseNodesResponseData - a model defined in Swagger

        :param node_id: The node_id of this GetAdvertisingBrowseNodesResponseData.  # noqa: E501
        :type node_id: str
        :param name: The name of this GetAdvertisingBrowseNodesResponseData.  # noqa: E501
        :type name: str
        :param children: The children of this GetAdvertisingBrowseNodesResponseData.  # noqa: E501
        :type children: List[BrowseNode]
        :param ancestors: The ancestors of this GetAdvertisingBrowseNodesResponseData.  # noqa: E501
        :type ancestors: List[BrowseNode]
        """
        self.swagger_types = {
            'node_id': str,
            'name': str,
            'children': List[BrowseNode],
            'ancestors': List[BrowseNode]
        }

        self.attribute_map = {
            'node_id': 'node_id',
            'name': 'name',
            'children': 'children',
            'ancestors': 'ancestors'
        }

        self._node_id = node_id
        self._name = name
        self._children = children
        self._ancestors = ancestors

    @classmethod
    def from_dict(cls, dikt) -> 'GetAdvertisingBrowseNodesResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetAdvertisingBrowseNodesResponse_data of this GetAdvertisingBrowseNodesResponseData.  # noqa: E501
        :rtype: GetAdvertisingBrowseNodesResponseData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_id(self) -> str:
        """Gets the node_id of this GetAdvertisingBrowseNodesResponseData.


        :return: The node_id of this GetAdvertisingBrowseNodesResponseData.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id: str):
        """Sets the node_id of this GetAdvertisingBrowseNodesResponseData.


        :param node_id: The node_id of this GetAdvertisingBrowseNodesResponseData.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def name(self) -> str:
        """Gets the name of this GetAdvertisingBrowseNodesResponseData.


        :return: The name of this GetAdvertisingBrowseNodesResponseData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GetAdvertisingBrowseNodesResponseData.


        :param name: The name of this GetAdvertisingBrowseNodesResponseData.
        :type name: str
        """

        self._name = name

    @property
    def children(self) -> List[BrowseNode]:
        """Gets the children of this GetAdvertisingBrowseNodesResponseData.


        :return: The children of this GetAdvertisingBrowseNodesResponseData.
        :rtype: List[BrowseNode]
        """
        return self._children

    @children.setter
    def children(self, children: List[BrowseNode]):
        """Sets the children of this GetAdvertisingBrowseNodesResponseData.


        :param children: The children of this GetAdvertisingBrowseNodesResponseData.
        :type children: List[BrowseNode]
        """

        self._children = children

    @property
    def ancestors(self) -> List[BrowseNode]:
        """Gets the ancestors of this GetAdvertisingBrowseNodesResponseData.


        :return: The ancestors of this GetAdvertisingBrowseNodesResponseData.
        :rtype: List[BrowseNode]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors: List[BrowseNode]):
        """Sets the ancestors of this GetAdvertisingBrowseNodesResponseData.


        :param ancestors: The ancestors of this GetAdvertisingBrowseNodesResponseData.
        :type ancestors: List[BrowseNode]
        """

        self._ancestors = ancestors
